@host = http://{{host}}:1323/v1
@p1accountId = 1
@p2accountId = 2
@matchId = 1
@cutIndex = 30

### Create new match and player
POST {{host}}/match/{{p1accountId}}
Content-Type: application/json

> {%
    client.test("Test status code", function() {
        console.log("Response status: " + response.status);
        client.assert(response.status === 200, "Response status is not 200");
    });
 
    client.test("Response content-type is json", function () {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });
%}

### Game should be in New state
GET {{host}}/match/{{matchId}}
Content-Type: application/json

> {%
    client.test("Test status code", function() {
        console.log("Response status: " + response.status);
        client.assert(response.status === 200, "Response status is not 200");
    });
 
    client.test("Response content-type is json", function () {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

    client.test("Is GameState NewGameState", function () {
        client.log(jsonPath(response.body, "$.Gamestate",))
        client.assert(jsonPath(response.body, "$.Gamestate",) == "New", "GameState is not New");
    });
%}

### Get match deck
GET {{host}}/match/{{matchId}}/cards
	
> {%
    var matchIdToMatch = 1;   
    var minNumOfMatches = 52; 

    client.test("Test status code", function() {
        console.log("Response status: " + response.status);
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

     client.test(`At least ${minNumOfMatches} match(es) exists`, function () {
        client.assert(jsonPath(response.body, "@") >= `${minNumOfMatches}`, "Not enough matches");
    });
%}


### Get list of open matches
GET {{host}}/open

> {%
    var minNumOfMatches = 1;    

    client.test("Test status code", function() {
        console.log("Response status: " + response.status);
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

     client.test(`At least ${minNumOfMatches} match(es) exists`, function () {
        client.assert(jsonPath(response.body, "@",) >= `${minNumOfMatches}`, "Not enough matches");
    });
%}

### P2 join match
PUT {{host}}/match/{{matchId}}/join/{{p2accountId}}
Content-Type: application/json

> {%
    var matchIdToMatch = 1;    

    client.test("Test status code", function() {
        console.log("Response status: " + response.status);
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

    client.test("Is GameState Determine", function () {
        client.log(jsonPath(response.body, "$.Gamestate",))
        client.assert(jsonPath(response.body, "$.Gamestate",) == "Determine", "GameState is not CutState");
    });
%}


### Determine first player
PUT {{host}}/match/{{matchId}}/determinefirst
Content-Type: application/json
	
> {%

    client.test("Test status code", function() {
        console.log("Response status: " + response.status);
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

    client.test(`Current Player is player ID 1`, function () {
        client.assert(jsonPath(response.body, "$.Currentplayerturn") == `1`, "CurrentPlayerTurn is null");
    });
%}

### Deal cards to player
PUT {{host}}/match/{{matchId}}/deal
Content-Type: application/json
	
> {%

    client.test("Test status code", function() {
        console.log("Response status: " + response.status);
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

    client.test(`Current Player is player ID 1`, function () {
        client.assert(jsonPath(response.body, "$.Currentplayerturn") == `1`, "CurrentPlayerTurn is null");
    });
%}


### Discard to kitty
PUT {{host}}/match/{{matchId}}/player/{{p1accountId}}/kitty
Content-Type: application/json
	

{
  "cardIds": [
    1
  ],
  "senderId": 1
}


> {%

    client.test("Test status code", function() {
        console.log("Response status: " + response.status);
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

    client.test(`Current Player is player ID 1`, function () {
        client.assert(jsonPath(response.body, "$.Currentplayerturn") == `1`, "CurrentPlayerTurn is null");
    });
%}


### Cut match deck
PUT {{host}}/match/{{matchId}}/cut/{{cutIndex}}
Content-Type: application/json
	
> {%

    client.test("Test status code", function() {
        console.log("Response status: " + response.status);
        client.assert(response.status === 200, "Response status is not 200");
    });

    client.test("Response content-type is json", function () {
        var type = response.contentType.mimeType;
        client.assert(type === "application/json", "Expected 'application/json' but received '" + type + "'");
    });

    client.test(`Cutgamecardid is 30`, function () {
        client.assert(jsonPath(response.body, "$.Cutgamecardid") == `30`,"CurrentPlayerTurn is " + jsonPath(response.body, "$.Cutgamecardid"));
    });
%}

